//-------------------------------------------------------
//  Library: Data Helper
//-------------------------------------------------------

var _ = require('lodash');

var _config = require('../../config');

//-------------------------
//  Private
//-------------------------

function _getPathString(string) {
  return string.replace(/\s+/g, '-').toLowerCase();
}

//-------------------------
//  Public
//-------------------------

var self = module.exports = {

  getCategoryPath: function (categoryName) {
    var pathStr = _getPathString(categoryName);
    return pathStr + '/';
  },

  getSubCategoryPath: function (subCategoryName) {
    var pathStr = _getPathString(subCategoryName);
    return pathStr + '/';
  },

  getNamePath: function (name) {
    var pathStr = _getPathString(name);
    return pathStr + '/';
  },

  getCategorySubCategoryNamePath: function (categoryName, subCategoryName, name) {
    var path = '';
    path += this.getCategoryPath(categoryName);
    path += this.getSubCategoryPath(subCategoryName);
    path += this.getNamePath(name);
    return path;
  },

  getFormattedSubCategoryName: function (inputName) {
    return _.startCase(_.toLower(inputName));
  },

  getFormattedName: function (inputName) {
    return _.startCase(_.toLower(inputName));
  },

  getFormattedModifierName: function (inputName) {
    return _.startCase(_.toLower(inputName));
  },

  getCssClassName: function (name) {
    return name.replace(/\s+/g, '');
  },

  getSassVarPrefix: function (name) {
    return name.replace(/\s+/g, '-').toLowerCase();
  },

  getSizeSassIncludeName: function (sizeName) {
    return sizeName.toLowerCase();
  },

  getSizeCssClassName: function (name, sizeName) {
    var name = this.getCssClassName(name);
    var result = name + sizeName;
    return result;
  },

  getSizeCssClassNames: function (name, sizeNames) {
    var results = [];
    for (var i = 0; i < sizeNames.length; i++) {
      var name = this.getCssClassName(name);
      var cssClassName = this.getSizeCssClassName(name, sizeNames[i]);
      results.push(cssClassName);
    }
    return results;
  },

  getModifierCssClassSuffix: function (modifierName) {
    var strs = modifierName.toLowerCase().match(/[^\s-]+/g);
    var result = strs[0].toLowerCase();
    if(strs.length > 1){
      for(var i = 1; i < strs.length; i++) {
        result += _.upperFirst(strs[i]);
      }
    }
    return result;
  },

  getModifierCssClassName: function (name, modifierName) {
    var css = this.getCssClassName(name);
    var suffix = this.getModifierCssClassSuffix(modifierName);
    return css + '--' + suffix;
  },

  getModifierCssClassNames: function (name, modifierNames) {
    var results = [];
    for (var i = 0; i < modifierNames.length; i++) {
      var modifier = this.getModifierCssClassName(name, modifierNames[i]);
      results.push(modifier);
    }
    return results;
  },

  getFullCssClassName: function (name, sizeNames, modifierName) {
    var result = this.getCssClassName(name);
    if(sizeNames){
      var sizes = this.getSizeCssClassNames(name, sizeNames);
      for (var i = 0; i < sizes.length; i++) {
        result += ' ' + sizes[i];
      }
    }
    if(modifierName){
      result += ' ';
      result += this.getModifierCssClassName(name, modifierName);
    }    
    return result;
  },

  getModuleClassName: function (name) {
    return name.replace(/\s+/g, '');
  },

  getHtmlDefinitionFileName: function (name) {
    var path = _getPathString(name);
    return 'component.' + path + '.definition.html';
  },

  getNotesDefinitionFileName: function (name) {
    var path = _getPathString(name);
    return 'component.' + path + '.definition.md';
  },

  getSassDefinitionFileName: function (name) {
    var path = _getPathString(name);
    return 'component.' + path + '.definition.scss';
  },

  getSassSizeFileName: function (name, sizeName) {
    var result = 'component.';
    result += _getPathString(name);
    result += '.';
    result += _getPathString(sizeName);
    result += '.scss';
    return result;
  },

  getSassImportFileName: function (name) {
    var result = 'component.';
    result += _getPathString(name);
    result += '.scss';
    return result;
  },

  getModuleFileName: function (name) {
    return this.getModuleClassName(name) + '.js';
  },

  getHtmlModifierFileName: function (name, modifierName) {
    var namePath = _getPathString(name);
    var modifierPath = _getPathString(modifierName);
    return 'component.' + namePath + '.' + modifierPath + '.html';
  },

  getNotesModifierFileName: function (name, modifierName) {
    var namePath = _getPathString(name);
    var modifierPath = _getPathString(modifierName);
    return 'component.' + namePath + '.' + modifierPath + '.md';
  },

  getSassModifierFileName: function (name, modifierName) {
    var namePath = _getPathString(name);
    var modifierPath = _getPathString(modifierName);
    return 'component.' + namePath + '.' + modifierPath + '.scss';
  },

};