//-------------------------------------------------------
//  Library: Data Helper
//-------------------------------------------------------

var _ = require('lodash');

var _config = require('../../data/config');

//-------------------------
//  Private
//-------------------------

//-------------------------
//  Public
//-------------------------

var self = module.exports = {

  // Prompt Objects

  getInquirerPromptChoicesAsCheckboxChoices: function (choices, checkAll) {
    var checkboxes = [];
    for(var i = 0; i < choices.length; i++) {
      var checkbox = {};
      checkbox.name = choices[i];
      checkbox.value = choices[i];
      checkbox.checked = checkAll ? true : false;
      checkboxes.push(checkbox);
    }
    return checkboxes;
  },

  // Data

  extractDataCategoryNames: function (categories) {
    var names = [];
    for(var i = 0; i < categories.length; i++) {
      names.push(categories[i].name);
    }
    return names;
  },

  extractDataSubCategoryNames: function (category) {
    var names = [];
    var subCategories = category.categories;
    for (var i = 0; i < subCategories.length; i++) {
      var subCategory = subCategories[i];
      var name = subCategory.name;
      names.push(name);
    }
    return names;
  },

  extractDataSizeNames: function (sizes) {
    var names = [];
    for(var i = 0; i < sizes.length; i++) {
      names.push(sizes[i].name);
    }
    return names;
  },

  getDataSummaryObj: function (categoryName, subCategoryName, name, description, sizeNames, moduleClassName) {

    var obj = {};

    obj.categoryName = categoryName;
    obj.subCategoryName = subCategoryName;
    obj.name = name;
    obj.description = description;
    obj.cssClassName = this.getCssClassNameFromName(name);
    obj.sizeNames = sizeNames.length > 0 ? sizeNames : 'None';
    obj.sizeCssClassNames = sizeNames.length > 0 ? this.getSizeCssClassNames(name, sizeNames) : 'N/A';
    obj.moduleClassName = moduleClassName ? moduleClassName : 'None';

    return obj;

  },

  // String Formatting/Conversions

  getFormattedName: function (name) {
    var strs = name.toLowerCase().match(/[^\s-]+/g);
    var result = '';
    for(var i = 0; i < strs.length; i++) {
      result += _.upperFirst(strs[i]) + ' ';
    }
    result = result.trim();
    return result;
  },

  getFormattedSubCategoryName: function (name) {
    // TODO
    var str = name;
    return str;
  },

  getCssClassName: function (name) {
    var result = name.replace(/\s+/g, '');
    return result;
  },

  getSizeCssClassNames: function (name, sizeNames) {
    var results = [];
    for (var i = 0; i < sizeNames.length; i++) {
      var name = this.getCssClassNameFromName(name);
      var cssClassName = name + sizeNames[i];
      results.push(cssClassName);
    }
    return results;
  },

  getModifierCssClassSuffix: function (modifierName) {
    var strs = modifierName.toLowerCase().match(/[^\s-]+/g);
    var result = strs[0].toLowerCase();
    if(strs.length > 1){
      for(var i = 1; i < strs.length; i++) {
        result += _.upperFirst(strs[i]);
      }
    }
    return result;
  },

  getModifierCssClassName: function (name, modifierName) {
    var name = this.getCssClassName(name);
    var suffix = this.getModifierCssClassSuffix(modifierName);
    var result = name + '--' + suffix;
    return result;
  },

  getModifierCssClassNames: function (name, modifierNames) {
    var results = [];
    for (var i = 0; i < modifierNames.length; i++) {
      var name = this.getModifierCssClassName(name, modifierNames[i]);
      results.push(name);
    }
    return results;
  },

  getFullCssClassName: function (name, sizeNames, modifierNames) {
    var name = this.getCssClassName(name);
    var sizes = this.getSizeCssClassNames(name, sizeNames);
    var modifiers = this.getModifierCssClassNames(name, modifierNames);
  },

  getModuleClassName: function (name) {
    var result = name.replace(/\s+/g, '');
    return result;
  },

  // File Paths

  getNameFromSassFolder: function (folderName) {
    var strs = folderName.toLowerCase().match(/[^\s-]+/g);
    var result = '';
    for(var i = 0; i < strs.length; i++) {
      result += _.upperFirst(strs[i]) + ' ';
    }
    result = result.trim();
    return result;
  },

  getCategorySassPath: function (name) {
    var result = _config.componentData.paths.sass + name.replace(/\s+/g, '-').toLowerCase();;
    return result;
  }

};