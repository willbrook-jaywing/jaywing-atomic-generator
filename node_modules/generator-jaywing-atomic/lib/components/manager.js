//-------------------------------------------------------
//  Library: Data Manager
//-------------------------------------------------------

var _config = require('../../data/config');
var _miner = require('../../lib/components/miner');
var _helper = require('../../lib/components/helper');

//-------------------------
//  Private
//-------------------------

var _data = {};

function _getTemplateData(categoryName, subCategoryName, name, description, sizeNames, moduleClassName) {

  var obj = {};

  obj.categoryName = categoryName;
  obj.subCategoryName = subCategoryName;
  obj.name = name;
  obj.description = description;
  obj.cssClassName = this.getCssClassName(name);
  obj.sizeNames = sizeNames;
  obj.sizeCssClassNames = sizeNames.length > 0 ? this.getSizeCssClassNames(name, sizeNames) : null;
  obj.moduleClassName = moduleClassName;

  obj.fullCssClassName = _helper.getFullCssClassName(name, sizeNames, null);

  var data = {};
  data.name = _name;
  data.htmlClassName = _cssClassName;
  for (var i = 0; i < _sizes.length; i++) {
    data.htmlClassName += ' ' + _sizeCssClassNames[i];
  }
  data.cssClassName = _cssClassName;
  data.sassVarPrefix = _namePath;
  data.cssTempColor = _cssTempColor;
  data.cssTempBackground = _cssTempBackground;
  data.cssTempPadding = _cssTempPadding;
  data.jsClassName = _jsClassName;
  data.description = _description;
  data.pageId = _namePath;
  var dataModuleAttr = _jsClassName ? ' data-module=\"' + _jsClassName + '\"' : '';
  data.exampleHtml = '<div class=\"' + data.htmlClassName + '\"' + dataModuleAttr + '>\n\n\t\t\t<h4>' + _name + '</h4>\n\n\t\t</div>';
  data.codeHtml = '<div class=\"' + data.htmlClassName + '\"' + dataModuleAttr + '>\n\n\t\t\t\t\t<h4>' + _name + '</h4>\n\n\t\t\t\t</div>';

  return obj;

}

//-------------------------
//  Public
//-------------------------

var self = module.exports = {

  init: function () {

    // init
    _data.componentData = {};

    // defaults
    _data.componentData.categories = _config.componentData.categories;
    _data.componentData.sizes = _config.componentData.sizes;

  },

  getCategoryNames: function () {
    var names = _helper.extractDataCategoryNames(_data.componentData.categories);
    return names;
  },

  getSubCategoryNames: function (categoryName) {

    var names = [];

    // Find the corresponding category in the data
    if(categoryName == 'Core'){
      var categories = _data.componentData.categories;
      for (var i = 0; i < categories.length; i++) {
        if(categories[i].name == categoryName) {
          var category = categories[i];
          names = _helper.extractDataSubCategoryNames(category);
          break;
        }
      }
    } else {
      names = _miner.getSubCategoryNamesFromSassFolders(categoryName);
    }

    return names;

  },

  getNames: function (category) {
    var names = _miner.getNamesFromSassFolders(category);
    return names;
  },

  getSizeNames: function () {
    var names = _helper.extractDataSizeNames(_data.componentData.sizes);
    return names;
  },

  getModuleClassNames: function () {
    var names = _miner.getModuleClassNamesFromModulesFolder();
    return names;
  },

  addComponent: function (categoryName, subCategoryName, name, description, sizeNames, moduleClassName) {

    var templateData = _getTemplateData(categoryName, subCategoryName, name, description, sizeNames, moduleClassName);

    var sassImports = [];
    var fileExtensions = _createModule ? _templateFileExtensions : _templateFileExtensions.slice(0, -1);

    // Add to docs data
    var docsTemplateDataFileObj = JSON.parse(_fs.readFileSync(_docsTemplateDataFile, 'utf8'));
    var docsPageItemObj = {};
    docsPageItemObj.id = _namePath;
    docsPageItemObj.title = _name;
    docsPageItemObj.section = "components";
    docsPageItemObj.ready = true;

    // Find corresponding page object
    var docsPagesObj = docsTemplateDataFileObj.docs_pages;
    var docsPageObjFound = false;
    for (var p = 0; p < docsPagesObj.length; p++) {
      var docsPageObj = docsPagesObj[p];
      if (docsPageObj.category == _category && docsPageObj.section == 'components') {
        docsPageObjFound = true;
        docsPageObj.items.push(docsPageItemObj);
        break;
      }
    }

    // If no corresponding page object found, at a new one
    if(!docsPageObjFound) {
      var docsPageObj = {};
      docsPageObj.category = _category;
      docsPageObj.section = 'components';
      docsPageObj.items = [];
      docsPageObj.items.push(docsPageItemObj);
      docsPagesObj.push(docsPageObj);
    }

    // Write to docs data
    var editedDocsTemplateDataFileObj = JSON.stringify(docsTemplateDataFileObj, null, 2);
    _fs.writeFile(_docsTemplateDataFile, editedDocsTemplateDataFileObj);

    // Add base files
    for(var i = 0; i < fileExtensions.length; i++) {
      var extension = fileExtensions[i];
      if(extension !== '.scss') {

        var filePath;
        switch(extension) {
          case '.njk':
            filePath = _pathTemplate + _namePath;
            break;
          case '.definition.scss':
            filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
            break;
          case '.size.scss':
            filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
            break;
          case '.js':
            filePath = _pathJs + _jsClassName;
            break;
        }

        var templatePath = _templateFilePrefix + extension;
        var fullFilePath;

        if(extension == '.definition.scss') sassImports.push(_filePrefix + '.' + _namePath + '.definition');
        if(extension == '.size.scss') {
          for (var a = 0; a < _sizes.length; a++) {
            data.sizeName = _sizeNames[a];
            data.sizeIncludeName = _sizeIncludeNames[a];
            data.sizeCssClassName = _sizeCssClassNames[a];
            var sizePath = _sizes[a].toLowerCase();
            fullFilePath = filePath + '.' + sizePath + '.scss';
            sassImports.push(_filePrefix + '.' + _namePath + '.' + sizePath);
            this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);
          }
        } else {
          fullFilePath = filePath + extension;
          this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);
        }
      }
    }

    // Add sass config
    var extension = '.scss';
    var templatePath = _templateFilePrefix + extension;
    var filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
    var fullFilePath = filePath + extension;
    data.sassImports = '';
    for (var x = 0; x < sassImports.length; x++) {
      data.sassImports += '@import \'' + sassImports[x] + '\';\n';
    }
    this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);

    this.log('  Adding ' + _name + ' component into the ' + _category + ' category...');

  },

  deleteComponent: function (categoryName, name) {

  }

};