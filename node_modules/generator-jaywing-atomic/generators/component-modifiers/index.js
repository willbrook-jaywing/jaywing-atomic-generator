//-------------------------------------------------------
//  Generator: Component Modifiers
//-------------------------------------------------------

var _generator = require('yeoman-generator');
var _inquirer = require('inquirer');
var _fs = require('fs');
var _path = require('path');
var _ = require('lodash');

var _config = require('../config');
var _templateFilePrefix = _config.components.templateFilePrefix;
var _templateFileExtensions = _config.components.templateFileExtensions;
var _rootPath = _config.components.rootPath;
var _filePrefix = _config.components.filePrefix;

var _action = null;
var _category = null;
var _categoryPath = null;
var _name = null;
var _namePath = null;
var _cssClassName = null;
var _jsClassName = null;
var _description = null;
var _isDynamic = null;
var _sizes = null;
var _sizeNames = null;
var _sizeIncludeNames = null;
var _sizeCssClassNames = null;
var _names = null;
var _namePaths = null;

var _promptActionObj = {type: 'list', name: 'action', message: 'Action:', choices: ['Add', 'Delete', new _inquirer.Separator(), 'Back']};
var _promptCategoryObj = {type: 'list', name: 'category', message: 'Category:', choices: ['Defaults', 'Objects', 'Elements', 'Navigation', 'Common']};
var _promptNameObj = {type: 'input', name: 'name', message : 'Name:'};
var _promptDescriptionObj = {type: 'input', name: 'description', message : 'Description:', default: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'};
var _promptIsDynamicObj = {type: 'list', name: 'isDynamic', message : 'Dynamic:', choices: ['Yes', 'No']};
var _promptSizesObj = {type: 'checkbox', name: 'sizes', message : 'Sizes:', choices: [{name: 'Xxs', value: 'Xxs', checked: true}, {name: 'Xs', value: 'Xs', checked: true}, {name: 'Sm', value: 'Sm', checked: true}, {name: 'Md', value: 'Md', checked: true}, {name: 'Lg', value: 'Lg', checked: true}, {name: 'Xl', value: 'Xl', checked: true}, {name: 'Xxl', value: 'Xxl', checked: true}]};
var _promptNamesObj = {type: 'checkbox', name: 'names', message: 'Names:', choices: []};
var _promptAddObj = {type: 'list', name: 'add', message : 'Are you sure?:', choices: ['Yes', 'No']};
var _promptDeleteObj = {type: 'list', name: 'delete', message : 'Are you sure?:', choices: ['Yes', 'No']};

var baseExtension = {

  prompting: function () {
    this._promptAction();
  },

  _promptAction: function () {
    return this.prompt(_promptActionObj).then(function (answers) {
      _action = answers.action;
      _action == 'Back' ? this.composeWith('atomic:app') : this._promptCategory();
    }.bind(this));
  },

  _promptCategory: function () {
    return this.prompt(_promptCategoryObj).then(function (answers) {
      _category = answers.category;
      _categoryPath = _category.toLowerCase();
      _action == 'Add' ? this._promptName() : this._promptNames();
    }.bind(this));
  },

  _promptName: function () {
    _promptNameObj.validate = this._validateName;
    return this.prompt(_promptNameObj).then(function (answers) {
      _name = this._getName(answers.name);
      _namePath = this._getNamePath(answers.name);
      _cssClassName = _category == 'Objects' ? 'o-' + this._getCssClassName(answers.name) : this._getCssClassName(answers.name);
      this.log('  Docs name: ' + _name);
      this.log('  Css class: ' + _cssClassName);
      this.log('  Path name: ' + _namePath + '/...');
      this._promptDescription();
    }.bind(this));
  },

  _promptDescription: function () {
    return this.prompt(_promptDescriptionObj).then(function (answers) {
      _description = answers.description;
      this._promptIsDynamic();
    }.bind(this));
  },

  _promptIsDynamic: function () {
    return this.prompt(_promptIsDynamicObj).then(function (answers) {
      _isDynamic = (answers.isDynamic == 'Yes');
      _jsClassName = this._getJsClassName(_name);
      if(_isDynamic) this.log('  JS class: ' + _jsClassName);
      this._promptSizes();
    }.bind(this));
  },

  _promptSizes: function () {
    return this.prompt(_promptSizesObj).then(function (answers) {
      _sizes = answers.sizes;
      _sizeNames = [];
      _sizeIncludeNames = [];
      _sizeCssClassNames = [];
      for(var i = 0; i < _sizes.length; i++) {
        _sizeNames.push(_name + ' ' + _sizes[i]);
        _sizeIncludeNames.push(_sizes[i].toLowerCase());
        _sizeCssClassNames.push(_cssClassName + _sizes[i]);
      }
      this._promptAdd();
    }.bind(this));
  },

  _promptNames: function () {
    var path = _rootPath + _categoryPath;
    var exists = _fs.existsSync(path);
    if(exists) {
      var readList = _fs.readdirSync(path);
      _names = [];
      _namePaths = [];
      for(var i = 0; i < readList.length; i++) {
        var name = this._getName(readList[i]);
        _names.push(name);
      }
      _promptNamesObj.choices = _names;
      return this.prompt(_promptNamesObj).then(function (answers) {
        _names = [];
        _namePaths = [];
        for(var i = 0; i < answers.names.length; i++) {
          _names.push(answers.names[i]);
          var namePath = this._getNamePath(answers.names[i]);
          _namePaths.push(namePath);
        }
        this._promptDelete();
      }.bind(this));
    } else {
      this.log('  No components in that category');
      this.composeWith('atomic:app');
    }
  },

  _promptAdd: function () {
    return this.prompt(_promptAddObj).then(function (answers) {
      answers.add == 'Yes' ? this._add() : this.composeWith('atomic:app');
    }.bind(this));
  },

  _promptDelete: function () {
    return this.prompt(_promptDeleteObj).then(function (answers) {
      answers.delete == 'Yes' ? this._delete() : this.composeWith('atomic:app');
    }.bind(this));
  },

  _add: function () {

    var path = _rootPath + _categoryPath + '/' + _namePath + '/';
    var fileName = path + _filePrefix + '.' + _namePath;

    var data = {};
    data.name = _name;
    data.htmlClassName = _cssClassName;
    for(var i = 0; i < _sizeCssClassNames.length; i++) {
      data.htmlClassName += ' ' + _sizeCssClassNames[i];
    }
    data.cssClassName = _cssClassName;
    data.jsClassName = _jsClassName;
    data.description = _description;

    var fileExtensions = _isDynamic ? _templateFileExtensions : _templateFileExtensions.slice(0, -1);

    // Add base files
    for(var i = 0; i < fileExtensions.length; i++) {
      var extension = fileExtensions[i];
      var template = _templateFilePrefix + extension;
      var baseFile = fileName + extension;
      this.fs.copyTpl(this.templatePath(template), this.destinationPath(baseFile), data);
    }

    // Add size files
    for(var i = 0; i < _sizeNames.length; i++) {
      var data = {}
      data.sizeName = _sizeNames[i];
      data.sizeIncludeName = _sizeIncludeNames[i];
      data.sizeCssClassName = _sizeCssClassNames[i];
      var template = _templateFilePrefix + '.size.scss';
      var file = fileName + '.' + _sizes[i].toLowerCase() + '.' + 'scss';
      this.fs.copyTpl(this.templatePath(template), this.destinationPath(file), data);
    }

    this.log('  Adding ' + _name + ' component into the ' + _category + ' category...');

  },

  _delete: function () {
    for(var i = 0; i < _namePaths.length; i++) {
      var name = _names[i];
      var namePath = _namePaths[i];
      var path = _rootPath + _categoryPath + '/' + namePath + '/';
      this.log('  Deleting ' + name + ' component from the ' + _category + ' category...');
      if(_fs.existsSync(path)) {
        _fs.readdirSync(path).forEach(function(file) {
          var curPath = path + file;
          if(_fs.statSync(curPath).isDirectory()) {
            deleteFolderRecursive(curPath);
          } else {
            _fs.unlinkSync(curPath);
          }
        });
        _fs.rmdirSync(path);
      }
    }
  },

  _validateName: function (val) {
    var result = true;
    var regex = new RegExp(/(^[A-za-z]+( ?[A-za-z0-9]+)*$)/);
    if(!val.match(regex)) result = 'Use alphanumeric characters seperated by single spaces. No numbers at start.';
    return result;
  },

  _getName: function (str) {
    var strs = str.toLowerCase().match(/[^\s-]+/g);
    var result = '';
    for(var i = 0; i < strs.length; i++) {
      result += _.upperFirst(strs[i]) + ' ';
    }
    result = result.trim();
    return result;
  },

  _getNamePath: function (str) {
    return str.replace(/\s+/g, '-').toLowerCase();
  },

  _getCssClassName: function (str) {
    var result = this._getName(str);
    return result.replace(/\s+/g, '');
  },

  _getJsClassName: function (str) {
    return this._getCssClassName(str);
  }

}

module.exports = _generator.Base.extend(baseExtension);