//-------------------------------------------------------
//  Generator: Components
//-------------------------------------------------------

var _generator = require('yeoman-generator');
var _inquirer = require('inquirer');
var _fs = require('fs');
var _path = require('path');
var _ = require('lodash');

var _config = require('../../data/config');
var _manager = require('../../lib/components/manager');
var _helper = require('../../lib/components/helper');
var _validator = require('../../lib/components/validator');

//-------------------------
//  Private
//-------------------------

var _action = null;
var _categoryName = null;
var _name = null;
var _description = null;
var _moduleAction = null;
var _moduleName = null;

var _promptSelectActionObj = {type: 'list', name: 'action', message: 'Action:', choices: ['Add', 'Delete', new _inquirer.Separator(), 'Back']};
var _promptSelectCategoryNameObj = {type: 'list', name: 'categoryName', message: 'Category:', choices: []};
var _promptInputNameObj = {type: 'input', name: 'name', message : 'Name:'};
var _promptSelectNameObj = {type: 'checkbox', name: 'name', message: 'Components:', choices: []};
var _promptDescriptionObj = {type: 'input', name: 'description', message : 'Description:', default: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'};
var _promptSelectSizesObj = {type: 'checkbox', name: 'sizes', message : 'Sizes:', choices: []};

var _promptSelectModuleActionObj = {type: 'list', name: 'moduleAction', message: 'JS Module:', choices: ['Create New', 'Use Existing', 'None']};
var _promptSelectModuleNameObj = {type: 'list', name: 'moduleName', message: 'Modules:', choices: []};


var _promptAddObj = {type: 'list', name: 'add', message : 'All OK?', choices: ['Yes', 'No']};
var _promptDeleteObj = {type: 'list', name: 'delete', message : 'Are you sure?', choices: ['Yes', 'No']};

//-------------------------
//  Yeoman Base Extension
//-------------------------

var baseExtension = {

  _promptSelectAction: function () {
    return this.prompt(_promptSelectActionObj).then(function (answers) {
      _action = answers.action;
      _action == 'Back' ? this.composeWith('jaywing-atomic:app') : this._promptSelectCategoryName();
    }.bind(this));
  },

  _promptSelectCategoryName: function () {
    _promptSelectCategoryNameObj.choices = _manager.getCategoryNames();
    return this.prompt(_promptSelectCategoryNameObj).then(function (answers) {
      _categoryName = answers.categoryName;
      _action == 'Add' ? this._promptInputName() : this._promptSelectName();
    }.bind(this));
  },

  _promptInputName: function () {
    return this.prompt(_promptInputNameObj).then(function (answers) {
      _name = this._getName(answers.name);
      this._promptDescription();
    }.bind(this));
  },

  _promptSelectName: function () {
    _promptSelectNameObj.choices = _manager.getNames(_categoryName);
    if(_promptSelectNameObj.choices.length > 0) {
      return this.prompt(_promptSelectNameObj).then(function (answers) {
        _names = [];
        for(var i = 0; i < answers.name.length; i++) {
          _names.push(answers.name[i]);
        }
        this._promptDelete();
      }.bind(this));
    } else {
      this.log('  No components in that category found');
      // TODO Go to previous prompt
    }
  },

  _promptDescription: function () {
    return this.prompt(_promptDescriptionObj).then(function (answers) {
      _description = answers.description;
      this._promptSelectSizes();
    }.bind(this));
  },

  _promptSelectSizes: function () {
    var sizeNames = _manager.getSizeNames();
    var choices = _helper.getInquirerPromptChoicesAsCheckboxChoices(sizeNames, true);
    _promptSelectNameObj.choices = choices;
    return this.prompt(_promptSelectSizesObj).then(function (answers) {
      _sizes = answers.sizes;
      this._promptSelectModuleAction();
    }.bind(this));
  },

  _promptSelectModuleAction: function () {
    return this.prompt(_promptSelectModuleActionObj).then(function (answers) {
      _moduleAction = answers.moduleAction;
      switch(answers.moduleAction) {
        case 'Create New':
          this._promptAdd();
          break;
        case 'Use Existing':
          this._promptSelectModuleName();
          break;
        case 'None':
          this._promptAdd();
          break;
      }
    }.bind(this));
  },

  _promptSelectModuleName: function () {
    _promptSelectModuleNameObj.choices = _manager.getModuleNames();
    if(_promptSelectModuleNameObj.choices.length > 0) {
      return this.prompt(_promptSelectModuleNameObj).then(function (answers) {
        _moduleName = answers.moduleName;
        this._promptAdd();
      }.bind(this));
    } else {
      this.log('  No modules found');
      // TODO Go to previous prompt
    }
  },

  _promptAdd: function () {
    this._logDetails();
    return this.prompt(_promptAddObj).then(function (answers) {
      answers.add == 'Yes' ? this._add() : this.composeWith('jaywing-atomic:app');
    }.bind(this));
  },

  _promptDelete: function () {
    return this.prompt(_promptDeleteObj).then(function (answers) {

      if(answers.delete == 'Yes') {
        for (var i = 0; i < _names.length; i++) {
          this._delete(_names[i]);
        }
      } else {
        this.composeWith('jaywing-atomic:app');
      }

    }.bind(this));
  },

  _logDetails: function () {
    this.log('  -------------- Component ---------------');
    this.log('       Name: ' + _name);
    this.log('        Css: ' + _cssClassName);
    if(_sizes.length > 0) {
      var sizes = '';
      var sizeCssClassNames = '';
      for (var i = 0; i < _sizes.length; i++) {
        sizes += _sizes[i] + ' ';
        sizeCssClassNames += _sizeCssClassNames[i] + ' ';
      }
      sizes.trim();
      sizeCssClassNames.trim();
      this.log('      Sizes: ' + sizes);
      this.log('  Sizes Css: ' + sizeCssClassNames);
    } else {
      this.log('      Sizes: None');
      this.log('  Sizes Css: N/A');
    }
    _createModule ? this.log('         JS: ' + _jsClassName) : this.log('         JS: None');
    this.log('  ----------------------------------------');
  },

  _add: function () {

    // TODO
    // Use something else for _createModule
    // Use _moduleAction for js
    // Need _sizeNames = [];
    // Need _sizeIncludeNames = [];
    // Need _sizeCssClassNames = [];

    var data = {};
    data.name = _name;
    data.htmlClassName = _cssClassName;
    for (var i = 0; i < _sizes.length; i++) {
      data.htmlClassName += ' ' + _sizeCssClassNames[i];
    }
    data.cssClassName = _cssClassName;
    data.sassVarPrefix = _namePath;
    data.cssTempColor = _cssTempColor;
    data.cssTempBackground = _cssTempBackground;
    data.cssTempPadding = _cssTempPadding;
    data.jsClassName = _jsClassName;
    data.description = _description;
    data.pageId = _namePath;
    var dataModuleAttr = _jsClassName ? ' data-module=\"' + _jsClassName + '\"' : '';
    data.exampleHtml = '<div class=\"' + data.htmlClassName + '\"' + dataModuleAttr + '>\n\n\t\t\t<h4>' + _name + '</h4>\n\n\t\t</div>';
    data.codeHtml = '<div class=\"' + data.htmlClassName + '\"' + dataModuleAttr + '>\n\n\t\t\t\t\t<h4>' + _name + '</h4>\n\n\t\t\t\t</div>';

    var sassImports = [];
    var fileExtensions = _createModule ? _templateFileExtensions : _templateFileExtensions.slice(0, -1);

    // Add to docs data
    var docsTemplateDataFileObj = JSON.parse(_fs.readFileSync(_docsTemplateDataFile, 'utf8'));
    var docsPageItemObj = {};
    docsPageItemObj.id = _namePath;
    docsPageItemObj.title = _name;
    docsPageItemObj.section = "components";
    docsPageItemObj.ready = true;

    // Find corresponding page object
    var docsPagesObj = docsTemplateDataFileObj.docs_pages;
    var docsPageObjFound = false;
    for (var p = 0; p < docsPagesObj.length; p++) {
      var docsPageObj = docsPagesObj[p];
      if (docsPageObj.category == _categoryName && docsPageObj.section == 'components') {
        docsPageObjFound = true;
        docsPageObj.items.push(docsPageItemObj);
        break;
      }
    }

    // If no corresponding page object found, at a new one
    if(!docsPageObjFound) {
      var docsPageObj = {};
      docsPageObj.category = _categoryName;
      docsPageObj.section = 'components';
      docsPageObj.items = [];
      docsPageObj.items.push(docsPageItemObj);
      docsPagesObj.push(docsPageObj);
    }

    // Write to docs data
    var editedDocsTemplateDataFileObj = JSON.stringify(docsTemplateDataFileObj, null, 2);
    _fs.writeFile(_docsTemplateDataFile, editedDocsTemplateDataFileObj);

    // Add base files
    for(var i = 0; i < fileExtensions.length; i++) {
      var extension = fileExtensions[i];
      if(extension !== '.scss') {

        var filePath;
        switch(extension) {
          case '.njk':
            filePath = _pathTemplate + _namePath;
            break;
          case '.definition.scss':
            filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
            break;
          case '.size.scss':
            filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
            break;
          case '.js':
            filePath = _pathJs + _jsClassName;
            break;
        }

        var templatePath = _templateFilePrefix + extension;
        var fullFilePath;

        if(extension == '.definition.scss') sassImports.push(_filePrefix + '.' + _namePath + '.definition');
        if(extension == '.size.scss') {
          for (var a = 0; a < _sizes.length; a++) {
            data.sizeName = _sizeNames[a];
            data.sizeIncludeName = _sizeIncludeNames[a];
            data.sizeCssClassName = _sizeCssClassNames[a];
            var sizePath = _sizes[a].toLowerCase();
            fullFilePath = filePath + '.' + sizePath + '.scss';
            sassImports.push(_filePrefix + '.' + _namePath + '.' + sizePath);
            this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);
          }
        } else {
          fullFilePath = filePath + extension;
          this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);
        }
      }
    }

    // Add sass config
    var extension = '.scss';
    var templatePath = _templateFilePrefix + extension;
    var filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
    var fullFilePath = filePath + extension;
    data.sassImports = '';
    for (var x = 0; x < sassImports.length; x++) {
      data.sassImports += '@import \'' + sassImports[x] + '\';\n';
    }
    this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);

    this.log('  Adding ' + _name + ' component into the ' + _categoryName + ' category...');

  },

  _delete: function (name) {

    this.log('  Deleting ' + name + ' component from the ' + _categoryName + ' category...');

    // Remove from docs data
    var docsTemplateDataFileObj = JSON.parse(_fs.readFileSync(_docsTemplateDataFile, 'utf8'));
    var docsPagesObj = docsTemplateDataFileObj.docs_pages;
    for (var p = 0; p < docsPagesObj.length; p++) {
      var docsPageObj = docsPagesObj[p];
      if (docsPageObj.category == _categoryName && docsPageObj.section == 'components') {
        // Find matching page items
        var nonMatchingPageItems = [];
        for (var i = 0; i < docsPageObj.items.length; i++) {
          var docsPageItemObj = docsPageObj.items[i];
          if(docsPageItemObj.title !== name) {
            nonMatchingPageItems.push(docsPageItemObj);
          }
        }
        docsPageObj.items = nonMatchingPageItems;
      }
    }

    // Rewrite to docs data
    var editedDocsTemplateDataFileObj = JSON.stringify(docsTemplateDataFileObj, null, 2);
    _fs.writeFileSync(_docsTemplateDataFile, editedDocsTemplateDataFileObj);

    // Delete docs file
    var filePath = _pathTemplate + this._getNamePath(name) + '.njk';
    if(_fs.existsSync(filePath)) {
      _fs.unlinkSync(filePath);
    }

    // Delete sass files
    var filePath = _pathSass + _categoryPath + '/' + this._getNamePath(name) + '/';
    if(_fs.existsSync(filePath)) {
      _fs.readdirSync(filePath).forEach(function(file) {
        var curPath = filePath + file;
        if(_fs.statSync(curPath).isDirectory()) {
          deleteFolderRecursive(curPath);
        } else {
          _fs.unlinkSync(curPath);
        }
      });
      _fs.rmdirSync(filePath);
    }

    // Delete js module
    var filePath = _pathJs + this._getJsClassName(name) + '.js';
    if(_fs.existsSync(filePath)) {
      _fs.unlinkSync(filePath);
    }

  },

  _validateName: function (val) {
    var result = true;
    var regex = new RegExp(/(^[A-za-z]+( ?[A-za-z0-9]+)*$)/);
    if(!val.match(regex)) result = 'Use alphanumeric characters seperated by single spaces. No numbers at start.';
    return result;
  },

  _getName: function (str) {
    var strs = str.toLowerCase().match(/[^\s-]+/g);
    var result = '';
    for(var i = 0; i < strs.length; i++) {
      result += _.upperFirst(strs[i]) + ' ';
    }
    result = result.trim();
    return result;
  },

  _getNamePath: function (str) {
    return str.replace(/\s+/g, '-').toLowerCase();
  },

  _getCssClassName: function (str) {
    var result = this._getName(str);
    return result.replace(/\s+/g, '');
  },

  _getJsClassName: function (str) {
    return this._getCssClassName(str);
  },

  initializing: function () {
    this.log('  Initializing component data...');
    _manager.initData();
    _promptInputNameObj.validate = _validator.validateComponentName;
  },

  prompting: function () {
    this._promptSelectAction();
  }

}

module.exports = _generator.Base.extend(baseExtension);