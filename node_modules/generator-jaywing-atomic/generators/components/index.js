//-------------------------------------------------------
//  Generator: Components
//-------------------------------------------------------

var _generator = require('yeoman-generator');
var _inquirer = require('inquirer');
var _chalk = require('chalk');
var _fs = require('fs');
var _path = require('path');
var _ = require('lodash');

var _core = require('../../generators/components/lib/core');
var _helper = require('../../generators/components/lib/helpers/dataHelper');
var _validator = require('../../generators/components/lib/helpers/dataValidator');

//-------------------------
//  Private
//-------------------------

var _action = null;
var _subCategoryAction = null;
var _moduleAction = null;

var _categoryName = null;
var _subCategoryName = null;
var _name = null;
var _description = null;
var _sizeNames = null;
var _moduleClassName = null;
var _summaryObj = null;

var _promptSelectActionObj = {type: 'list', name: 'action', message: 'Action:', choices: ['Add', 'Delete', new _inquirer.Separator(), 'Back']};
var _promptSelectCategoryNameObj = {type: 'list', name: 'categoryName', message: 'Category:', choices: []};
var _promptSelectSubCategoryNameObj = {type: 'list', name: 'subCategoryName', message: 'Subcategory:', choices: []};
var _promptSelectSubCategoryActionObj = {type: 'list', name: 'subCategoryAction', message: 'Subcategory action:', choices: ['Place in existing', 'Create new']};
var _promptInputSubCategoryNameObj = {type: 'input', name: 'subCategoryName', message : 'Subcategory name:'};
var _promptInputNameObj = {type: 'input', name: 'name', message : 'Name:'};
var _promptSelectNameObj = {type: 'checkbox', name: 'name', message: 'Components:', choices: []};
var _promptInputDescriptionObj = {type: 'input', name: 'description', message : 'Description:', default: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.'};
var _promptSelectSizesObj = {type: 'checkbox', name: 'sizes', message : 'Sizes:', choices: []};
var _promptSelectModuleActionObj = {type: 'list', name: 'moduleAction', message: 'Module action:', choices: ['Create new', 'Use existing', 'None']};
var _promptSelectModuleClassNameObj = {type: 'list', name: 'moduleClassName', message: 'Modules:', choices: []};
var _promptConfirmAddObj = {type: 'list', name: 'confirmAdd', message : 'All OK?', choices: ['Yes', 'No']};
var _promptConfirmDeleteObj = {type: 'list', name: 'confirmDelete', message : 'Are you sure?', choices: ['Yes', 'No']};

//-------------------------
//  Yeoman Base Extension
//-------------------------

var baseExtension = {

  _promptSelectAction: function () {
    return this.prompt(_promptSelectActionObj).then(function (answers) {
      _action = answers.action;
      _action == 'Back' ? this._promptExit() : this._promptSelectCategoryName();
    }.bind(this));
  },

  _promptSelectCategoryName: function () {
    _promptSelectCategoryNameObj.choices = _core.getCategoryNames();
    return this.prompt(_promptSelectCategoryNameObj).then(function (answers) {
      _categoryName = answers.categoryName;
      switch(_categoryName) {
        case 'Core':
          this._promptSelectSubCategoryName();
          break;
        case 'Extended':
          this._promptSelectSubCategoryAction();
          break;
      }
    }.bind(this));
  },

  _promptSelectSubCategoryName: function () {
    _promptSelectSubCategoryNameObj.choices = _core.getSubCategoryNames(_categoryName);
    if(_promptSelectSubCategoryNameObj.choices.length > 0) {
      return this.prompt(_promptSelectSubCategoryNameObj).then(function (answers) {
        _subCategoryName = answers.subCategoryName;
        this._promptInputName();
      }.bind(this));
    } else {
      this.log(_chalk.red('  No components in that category found!'));
      this._promptSelectSubCategoryAction();
    }
  },

  _promptSelectSubCategoryAction: function () {
    return this.prompt(_promptSelectSubCategoryActionObj).then(function (answers) {
      _subCategoryAction = answers.subCategoryAction;
      switch(_subCategoryAction) {
        case 'Place in existing':
          this._promptSelectSubCategoryName();
          break;
        case 'Create new':
          this._promptInputSubCategoryName();
          break;
      }
    }.bind(this));
  },

  _promptInputSubCategoryName: function () {
    return this.prompt(_promptInputSubCategoryNameObj).then(function (answers) {
      _subCategoryName = _helper.getFormattedSubCategoryName(answers.subCategoryName);
      this._promptInputName();
    }.bind(this));
  },

  _promptInputName: function () {
    return this.prompt(_promptInputNameObj).then(function (answers) {
      _name = _helper.getFormattedName(answers.name);
      this._promptInputDescription();
    }.bind(this));
  },

  _promptSelectName: function () {
    _promptSelectNameObj.choices = _core.getNames(_categoryName);
    if(_promptSelectNameObj.choices.length > 0) {
      return this.prompt(_promptSelectNameObj).then(function (answers) {
        _names = [];
        for(var i = 0; i < answers.name.length; i++) {
          _names.push(answers.name[i]);
        }
        this._promptConfirmDelete();
      }.bind(this));
    } else {
      this.log(_chalk.red('  No components in that category found!'));
      this._promptStart();
    }
  },

  _promptInputDescription: function () {
    return this.prompt(_promptInputDescriptionObj).then(function (answers) {
      _description = answers.description;
      this._promptSelectSizes();
    }.bind(this));
  },

  _promptSelectSizes: function () {
    var sizeNames = _core.getSizeNames();
    var choices = _helper.getInquirerPromptChoicesAsCheckboxChoices(sizeNames, true);
    _promptSelectSizesObj.choices = choices;
    return this.prompt(_promptSelectSizesObj).then(function (answers) {
      _sizeNames = answers.sizes;
      this._promptSelectModuleAction();
    }.bind(this));
  },

  _promptSelectModuleAction: function () {
    return this.prompt(_promptSelectModuleActionObj).then(function (answers) {
      _moduleAction = answers.moduleAction;
      switch(_moduleAction) {
        case 'Create new':
          _moduleClassName = _helper.getModuleClassName(_name);
          this._promptConfirmAdd();
          break;
        case 'Use existing':
          this._promptSelectModuleClassName();
          break;
        case 'None':
          _moduleClassName = null;
          this._promptConfirmAdd();
          break;
      }
    }.bind(this));
  },

  _promptSelectModuleClassName: function () {
    var choices = _core.getModuleClassNames();
    _promptSelectModuleClassNameObj.choices = choices;
    if(choices.length > 0) {
      return this.prompt(_promptSelectModuleClassNameObj).then(function (answers) {
        _moduleClassName = answers.moduleClassName;
        this._promptConfirmAdd();
      }.bind(this));
    } else {
      this.log(_chalk.red('  No modules found!'));
      this._promptSelectModuleAction();
    }
  },

  _promptConfirmAdd: function () {
    this.log('_moduleClassName = ' + _moduleClassName);
    _summaryObj = _helper.getDataSummaryObj(_categoryName, _subCategoryName, _name, _description, _sizeNames, _moduleClassName);
    this._logSummary();
    return this.prompt(_promptConfirmAddObj).then(function (answers) {
      if(answers.confirmAdd == 'Yes') {
        _core.add(_categoryName, _subCategoryName, _name, _description, _sizeNames, _moduleClassName);
      } else {
        this._promptStart();
      }
    }.bind(this));
  },

  _promptConfirmDelete: function () {
    return this.prompt(_promptConfirmDeleteObj).then(function (answers) {
      if(answers.confirmDelete == 'Yes') {
        for (var i = 0; i < _names.length; i++) {
          _core.delete();
        }
      } else {
        this._promptStart();
      }
    }.bind(this));
  },

  _logSummary: function () {
    this.log(' --------------- Summary ----------------');
    this.log('        Category name: ' + _summaryObj.categoryName);
    this.log('     Subcategory name: ' + _summaryObj.subCategoryName);
    this.log('                 Name: ' + _summaryObj.name);
    this.log('          Description: ' + _summaryObj.description);
    this.log('                  CSS: ' + _summaryObj.cssClassName);
    this.log('           Size names: ' + _summaryObj.sizeNames);
    this.log(' Size CSS class names: ' + _summaryObj.sizeCssClassNames);
    this.log('    Module class name: ' + _summaryObj.moduleClassName);
    this.log(' ----------------------------------------');
  },

  _promptStart: function () {
    this.log(' -------------- COMPONENTS --------------');
    this._promptSelectAction();
  },

  _promptExit: function () {
    this.composeWith('jaywing-atomic:app');
  },

  initializing: function () {
    _core.init();
    _promptInputNameObj.validate = _validator.validateName;
    _promptInputSubCategoryNameObj.validate = _validator.validateSubCategoryName;
  },

  prompting: function () {
    this._promptStart();
  }

}

module.exports = _generator.Base.extend(baseExtension);