//-------------------------------------------------------
//  Generator: Components
//-------------------------------------------------------

var _generator = require('yeoman-generator');
var _chalk = require('chalk');
var _fs = require('fs');
var _path = require('path');

var _core = require('../../generators/components/lib/core');
var _dataHelper = require('../../generators/components/lib/helpers/dataHelper');
var _dataPropsHelper = require('../../generators/components/lib/helpers/dataPropsHelper');
var _promptHelper = require('../../generators/components/lib/helpers/promptHelper');
var _dataValidator = require('../../generators/components/lib/helpers/dataValidator');

//-------------------------
//  Private
//-------------------------

var _action = null;
var _subCategoryAction = null;
var _moduleAction = null;

var _categoryName = null;
var _subCategoryName = null;
var _name = null;
var _description = null;
var _sizeNames = null;
var _moduleClassName = null;

var _promptSelectActionObj = _promptHelper.getListObj('Action', ['Add', 'Delete', '|', 'Back']);
var _promptSelectCategoryNameObj = _promptHelper.getListObj('Category');
var _promptSelectSubCategoryNameObj = _promptHelper.getListObj('Subcategory');
var _promptSelectSubCategoryActionObj = _promptHelper.getListObj('Subcategory action', ['Place in existing', 'Create new']);
var _promptInputSubCategoryNameObj = _promptHelper.getInputObj('Subcategory');
var _promptInputNameObj = _promptHelper.getInputObj('Name');
var _promptSelectNameObj = _promptHelper.getCheckboxesObj('Name');
var _promptInputDescriptionObj = _promptHelper.getInputObj('Description');
var _promptSelectSizesObj = _promptHelper.getCheckboxesObj('Sizes');
var _promptSelectModuleActionObj = _promptHelper.getListObj('Module action', ['Create new', 'Use existing', 'None']);
var _promptSelectModuleClassNameObj = _promptHelper.getListObj('Modules');
var _promptConfirmAddObj = _promptHelper.getListObj('All OK', ['Yes', 'No']);
var _promptConfirmDeleteObj = _promptHelper.getListObj('Are you sure', ['Yes', 'No']);

//-------------------------
//  Yeoman Base Extension
//-------------------------

var baseExtension = {

  _promptSelectAction: function () {

    var promptObj = _promptSelectActionObj;

    return this.prompt(promptObj).then(function (answers) {
      _action = answers.action;
      _action == 'Back' ? this._promptExit() : this._promptSelectCategoryName();
    }.bind(this));

  },

  _promptSelectCategoryName: function () {

    var promptObj = _promptSelectCategoryNameObj;
    promptObj.choices = _core.getCategoryNames();

    return this.prompt(promptObj).then(function (answers) {
      _categoryName = answers.categoryName;
      switch(_categoryName) {
        case 'Core':
          this._promptSelectSubCategoryName();
          break;
        case 'Extended':
          this._promptSelectSubCategoryAction();
          break;
      }
    }.bind(this));

  },

  _promptSelectSubCategoryName: function () {

    var promptObj = _promptSelectSubCategoryNameObj;
    promptObj.choices = _core.getSubCategoryNames(_categoryName);

    if(promptObj.choices.length > 0) {

      return this.prompt(promptObj).then(function (answers) {
        _subCategoryName = answers.subCategoryName;
        this._promptInputName();
      }.bind(this));

    } else {
      this.log(_chalk.red('  No components in that category found!'));
      this._promptSelectSubCategoryAction();
    }

  },

  _promptSelectSubCategoryAction: function () {

    var promptObj = _promptSelectSubCategoryActionObj;

    return this.prompt(promptObj).then(function (answers) {
      _subCategoryAction = answers.subCategoryAction;
      switch(_subCategoryAction) {
        case 'Place in existing':
          this._promptSelectSubCategoryName();
          break;
        case 'Create new':
          this._promptInputSubCategoryName();
          break;
      }
    }.bind(this));

  },

  _promptInputSubCategoryName: function () {

    var promptObj = _promptInputSubCategoryNameObj;

    return this.prompt(promptObj).then(function (answers) {
      _subCategoryName = _dataPropsHelper.getFormattedSubCategoryName(answers.subCategoryName);
      this._promptInputName();
    }.bind(this));

  },

  _promptInputName: function () {

    var promptObj = _promptInputNameObj;

    return this.prompt(promptObj).then(function (answers) {
      _name = _dataPropsHelper.getFormattedName(answers.name);
      this._promptInputDescription();
    }.bind(this));

  },

  _promptSelectName: function () {

    var promptObj = _promptSelectNameObj;
    promptObj.choices = _core.getNames(_categoryName);

    if(promptObj.choices.length > 0) {

      return this.prompt(promptObj).then(function (answers) {
        _names = [];
        for(var i = 0; i < answers.name.length; i++) {
          _names.push(answers.name[i]);
        }
        this._promptConfirmDelete();
      }.bind(this));

    } else {
      this.log(_chalk.red('  No components in that category found!'));
      this._promptStart();
    }

  },

  _promptInputDescription: function () {

    var promptObj = _promptInputDescriptionObj;

    return this.prompt(promptObj).then(function (answers) {
      _description = answers.description;
      this._promptSelectSizes();
    }.bind(this));

  },

  _promptSelectSizes: function () {

    var promptObj = _promptSelectSizesObj;
    var sizeNames = _core.getSizeNames();
    var choices = _promptHelper.getCheckboxChoices(sizeNames, true);
    promptObj.choices = choices;

    return this.prompt(promptObj).then(function (answers) {
      _sizeNames = answers.sizes;
      this._promptSelectModuleAction();
    }.bind(this));

  },

  _promptSelectModuleAction: function () {

    var promptObj = _promptSelectModuleActionObj;

    return this.prompt(promptObj).then(function (answers) {
      _moduleAction = answers.moduleAction;
      switch(_moduleAction) {
        case 'Create new':
          _moduleClassName = _dataPropsHelper.getModuleClassName(_name);
          this._promptConfirmAdd();
          break;
        case 'Use existing':
          this._promptSelectModuleClassName();
          break;
        case 'None':
          _moduleClassName = null;
          this._promptConfirmAdd();
          break;
      }
    }.bind(this));

  },

  _promptSelectModuleClassName: function () {

    var promptObj = _promptSelectModuleClassNameObj;
    var choices = _core.getModuleClassNames();
    promptObj.choices = choices;

    if(choices.length > 0) {

      return this.prompt(promptObj).then(function (answers) {
        _moduleClassName = answers.moduleClassName;
        this._promptConfirmAdd();
      }.bind(this));

    } else {
      this.log(_chalk.red('  No modules found!'));
      this._promptSelectModuleAction();
    }

  },

  _promptConfirmAdd: function () {

    var promptObj = _promptConfirmAddObj;
    this._logSummary();

    return this.prompt(promptObj).then(function (answers) {
      if(answers.confirmAdd == 'Yes') {
        _core.add(_categoryName, _subCategoryName, _name, _description, _sizeNames, _moduleClassName);
      } else {
        this._promptStart();
      }
    }.bind(this));

  },

  _promptConfirmDelete: function () {

    var promptObj = _promptConfirmDeleteObj;

    return this.prompt(promptObj).then(function (answers) {
      if(answers.confirmDelete == 'Yes') {
        for (var i = 0; i < _names.length; i++) {
          _core.delete();
        }
      } else {
        this._promptStart();
      }
    }.bind(this));

  },

  _logSummary: function () {
    var obj = _dataHelper.createDataSummaryObj(_categoryName, _subCategoryName, _name, _description, _sizeNames, _moduleClassName);
    this.log(' --------------- Summary ----------------');
    this.log('        Category name: ' + obj.categoryName);
    this.log('     Subcategory name: ' + obj.subCategoryName);
    this.log('                 Name: ' + obj.name);
    this.log('          Description: ' + obj.description);
    this.log('                  CSS: ' + obj.cssClassName);
    this.log('           Size names: ' + obj.sizeNames);
    this.log(' Size CSS class names: ' + obj.sizeCssClassNames);
    this.log('    Module class name: ' + obj.moduleClassName);
    this.log(' ----------------------------------------');
  },

  _promptStart: function () {
    this.log(' -------------- COMPONENTS --------------');
    this._promptSelectAction();
  },

  _promptExit: function () {
    this.composeWith('jaywing-atomic:app');
  },

  initializing: function () {
    _core.init();
    _promptInputNameObj.validate = _dataValidator.validateName;
    _promptInputSubCategoryNameObj.validate = _dataValidator.validateSubCategoryName;
  },

  prompting: function () {
    this._promptStart();
  }

}

module.exports = _generator.Base.extend(baseExtension);