//-------------------------------------------------------
//  Generator: Components
//-------------------------------------------------------

var _generator = require('yeoman-generator');
var _chalk = require('chalk');
var _fs = require('fs');
var _path = require('path');

var _Core = require('../../lib/components/Core');
var _DataHelper = require('../../lib/components/DataHelper');
var _PropertyHelper = require('../../lib/components/PropertyHelper');
var _PromptHelper = require('../../lib/shared/PromptHelper');
var _InputValidator = require('../../lib/shared/InputValidator');

//-------------------------
//  Private
//-------------------------

var _action = null;
var _subCategoryAction = null;
var _moduleAction = null;

var _categoryName = null;
var _subCategoryName = null;
var _name = null;
var _description = null;
var _sizeNames = null;
var _moduleClassName = null;

var _promptSelectActionObj = _PromptHelper.getListObj('Action', ['Add Component', 'Delete Component(s)', '|', 'Back']);
var _promptSelectCategoryNameObj = _PromptHelper.getListObj('Category');
var _promptSelectSubCategoryNameObj = _PromptHelper.getListObj('Subcategory');
var _promptSelectSubCategoryActionObj = _PromptHelper.getListObj('Subcategory Action', ['Use Existing', 'Add New']);
var _promptInputSubCategoryNameObj = _PromptHelper.getInputObj('Subcategory');
var _promptInputNameObj = _PromptHelper.getInputObj('Name');
var _promptSelectNameObj = _PromptHelper.getCheckboxesObj('Name');
var _promptInputDescriptionObj = _PromptHelper.getInputObj('Description', 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.');
var _promptSelectSizesObj = _PromptHelper.getCheckboxesObj('Sizes');
var _promptSelectModuleActionObj = _PromptHelper.getListObj('Module Action', ['Add New', 'Use Existing', 'None']);
var _promptSelectModuleClassNameObj = _PromptHelper.getListObj('Modules');
var _promptConfirmAddObj = _PromptHelper.getListObj('All OK', ['Yes', 'No']);
var _promptConfirmDeleteObj = _PromptHelper.getListObj('Are You Sure', ['Yes', 'No']);

//-------------------------
//  Yeoman Base Extension
//-------------------------

var baseExtension = {

  _promptSelectAction: function () {

    var promptObj = _promptSelectActionObj;

    return this.prompt(promptObj).then(function (answers) {
      _action = answers.action;
      _action == 'Back' ? this._promptExit() : this._promptSelectCategoryName();
    }.bind(this));

  },

  _promptSelectCategoryName: function () {

    var promptObj = _promptSelectCategoryNameObj;
    promptObj.choices = _Core.getCategoryNames();

    return this.prompt(promptObj).then(function (answers) {
      _categoryName = answers.category;
      switch(_categoryName) {
        case 'Core':
          this._promptSelectSubCategoryName();
          break;
        case 'Compounds':
          _action == 'Add Component' ? this._promptSelectSubCategoryAction() : this._promptSelectSubCategoryName();
          break;
      }
    }.bind(this));

  },

  _promptSelectSubCategoryName: function () {

    var promptObj = _promptSelectSubCategoryNameObj;
    promptObj.choices = _Core.getSubCategoryNames(_categoryName);

    if(promptObj.choices.length > 0) {
      return this.prompt(promptObj).then(function (answers) {
        _subCategoryName = answers.subcategory;
        _action == 'Add Component' ? this._promptInputName() : this._promptSelectName();
      }.bind(this));
    } else {
      this.log(_chalk.red('  No subcategories found!'));
      _action == 'Add Component' ? this._promptSelectSubCategoryAction() : this._promptStart();
    }

  },

  _promptSelectSubCategoryAction: function () {

    var promptObj = _promptSelectSubCategoryActionObj;

    return this.prompt(promptObj).then(function (answers) {
      _subCategoryAction = answers.subcategoryAction;
      switch(_subCategoryAction) {
        case 'Use Existing':
          this._promptSelectSubCategoryName();
          break;
        case 'Add New':
          this._promptInputSubCategoryName();
          break;
      }
    }.bind(this));

  },

  _promptInputSubCategoryName: function () {

    var promptObj = _promptInputSubCategoryNameObj;

    return this.prompt(promptObj).then(function (answers) {
      _subCategoryName = answers.subcategory;
      this._promptInputName();
    }.bind(this));

  },

  _promptInputName: function () {

    var promptObj = _promptInputNameObj;

    return this.prompt(promptObj).then(function (answers) {
      _name = answers.name;
      this._promptInputDescription();
    }.bind(this));

  },

  _promptSelectName: function () {

    var promptObj = _promptSelectNameObj;
    promptObj.choices = _Core.getNames(_categoryName, _subCategoryName);

    if(promptObj.choices.length > 0) {
      return this.prompt(promptObj).then(function (answers) {
        _names = [];
        for(var i = 0; i < answers.name.length; i++) {
          _names.push(answers.name[i]);
        }
        this._promptConfirmDelete();
      }.bind(this));
    } else {
      this.log(_chalk.red('  No components found!'));
      this._promptStart();
    }

  },

  _promptInputDescription: function () {

    var promptObj = _promptInputDescriptionObj;

    return this.prompt(promptObj).then(function (answers) {
      _description = answers.description;
      this._promptSelectSizes();
    }.bind(this));

  },

  _promptSelectSizes: function () {

    var promptObj = _promptSelectSizesObj;
    var sizeNames = _Core.getSizeNames();
    var choices = _PromptHelper.getCheckboxChoices(sizeNames, true);
    promptObj.choices = choices;

    return this.prompt(promptObj).then(function (answers) {
      _sizeNames = answers.sizes;
      this._promptSelectModuleAction();
    }.bind(this));

  },

  _promptSelectModuleAction: function () {

    var promptObj = _promptSelectModuleActionObj;

    return this.prompt(promptObj).then(function (answers) {
      _moduleAction = answers.moduleAction;
      switch(_moduleAction) {
        case 'Add New':
          _moduleClassName = _PropertyHelper.getModuleClassName(_name);
          this._promptConfirmAdd();
          break;
        case 'Use Existing':
          this._promptSelectModuleClassName();
          break;
        case 'None':
          _moduleClassName = null;
          this._promptConfirmAdd();
          break;
      }
    }.bind(this));

  },

  _promptSelectModuleClassName: function () {

    var promptObj = _promptSelectModuleClassNameObj;
    var choices = _Core.getModuleClassNames();
    promptObj.choices = choices;

    if(choices.length > 0) {

      return this.prompt(promptObj).then(function (answers) {
        _moduleClassName = answers.modules;
        this._promptConfirmAdd();
      }.bind(this));

    } else {
      this.log(_chalk.red('  No modules found!'));
      this._promptSelectModuleAction();
    }

  },

  _promptConfirmAdd: function () {

    var promptObj = _promptConfirmAddObj;
    this._logSummary();

    return this.prompt(promptObj).then(function (answers) {
      if(answers.allOk == 'Yes') {
        _Core.add(_categoryName, _subCategoryName, _name, _description, _sizeNames, _moduleClassName);
      } else {
        this._promptStart();
      }
    }.bind(this));

  },

  _promptConfirmDelete: function () {

    var promptObj = _promptConfirmDeleteObj;

    return this.prompt(promptObj).then(function (answers) {
      if(answers.areYouSure == 'Yes') {
        for (var i = 0; i < _names.length; i++) {
          _Core.delete();
        }
      } else {
        this._promptStart();
      }
    }.bind(this));

  },

  _logSummary: function () {
    var obj = _DataHelper.createDataSummaryObj(_categoryName, _subCategoryName, _name, _description, _sizeNames, _moduleClassName);
    this.log(' --------------- Summary ----------------');
    this.log('        Category name: ' + obj.categoryName);
    this.log('     Subcategory name: ' + obj.subCategoryName);
    this.log('            Docs name: ' + obj.name);
    this.log('          Description: ' + obj.description);
    this.log('       CSS class name: ' + obj.cssClassName);
    this.log('           Size names: ' + obj.sizeNames);
    this.log(' Size CSS class names: ' + obj.sizeCssClassNames);
    this.log('    Module class name: ' + obj.moduleClassName);
    this.log(' ----------------------------------------');
  },

  _promptStart: function () {
    this.log(' -------------- COMPONENTS --------------');
    this._promptSelectAction();
  },

  _promptExit: function () {
    this.composeWith('jaywing-atomic:app');
  },

  initializing: function () {
    _Core.init();
    _promptInputNameObj.filter = _PropertyHelper.getFormattedName;
    _promptInputNameObj.validate = _InputValidator.validateComponentName;
    _promptInputSubCategoryNameObj.filter = _PropertyHelper.getFormattedSubCategoryName;
    _promptInputSubCategoryNameObj.validate = _InputValidator.validateComponentSubCategoryName;
  },

  prompting: function () {
    this._promptStart();
  }

}

module.exports = _generator.Base.extend(baseExtension);