//-------------------------------------------------------
//  Library: Data Manager
//-------------------------------------------------------

var _config = require('../../components/config');
var _fileManager = require('../../components/lib/managers/fileManager');
var _docsDataHelper = require('../../components/lib/helpers/docsDataHelper');
var _dataHelper = require('../../components/lib/helpers/dataHelper');

//-------------------------
//  Private
//-------------------------

var _data = null;
var _inputDataObj = null;

function _addDocsData() {

  var docsDataObj = JSON.parse(_fileManager.getDocsData());
  var pageObj = _docsDataHelper.extractPageObj(docsDataObj, _inputDataObj.categoryName, _inputDataObj.subCategoryName);
  if(!pageObj) {
    pageObj = _docsDataHelper.createPageObj(_inputDataObj.categoryName, _inputDataObj.subCategoryName);
    _docsDataHelper.addPageObjToDocsDataObj(docsDataObj, pageObj);
  }
  var pageItemObj = _docsDataHelper.createPageItemObj(_inputDataObj.name, _inputDataObj.categoryName);
  _docsDataHelper.addPageItemObjToPageObj(pageObj, pageItemObj);
  _fileManager.writeDocsData(docsDataObj);

}

function _addDocsFiles() {


}

function _addSassFiles() {


}

function _addModuleFile() {


}

//-------------------------
//  Public
//-------------------------

var self = module.exports = {

  init: function () {

    _data = {};

  },

  getCategoryNames: function () {
    var names = _dataHelper.extractDataCategoryNames(_config.componentData.categories);
    return names;
  },

  getSubCategoryNames: function (categoryName) {

    var names = [];

    // Find the corresponding category in the data
    if(categoryName == 'Core'){
      var categories = _config.componentData.categories;
      for (var i = 0; i < categories.length; i++) {
        if(categories[i].name == categoryName) {
          var category = categories[i];
          names = _dataHelper.extractDataSubCategoryNames(category);
          break;
        }
      }
    } else {
      names = _fileManager.getSubCategoryNamesFromSassFolders(categoryName);
    }

    return names;

  },

  getNames: function (categoryName, subCategoryName) {
    var names = _fileManager.getNamesFromSassFolders(categoryName, subCategoryName);
    return names;
  },

  getSizeNames: function () {
    var names = _dataHelper.extractDataSizeNames(_config.componentData.sizes);
    return names;
  },

  getModuleClassNames: function () {
    var names = _fileManager.getModuleClassNamesFromModulesFolder();
    return names;
  },

  add: function (categoryName, subCategoryName, name, description, sizeNames, moduleClassName) {

    _inputDataObj = _dataHelper.createDataObj(categoryName, subCategoryName, name, description, sizeNames, moduleClassName);

    _addDocsData();
    //_addDocsFiles();
    //_addSassFiles();
    //if(moduleClassName) _addModuleFile();

    // Add base files
    /*
    for(var i = 0; i < fileExtensions.length; i++) {
      var extension = fileExtensions[i];
      if(extension !== '.scss') {

        var filePath;
        switch(extension) {
          case '.njk':
            filePath = _pathTemplate + _namePath;
            break;
          case '.definition.scss':
            filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
            break;
          case '.size.scss':
            filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
            break;
          case '.js':
            filePath = _pathJs + _jsClassName;
            break;
        }

        var templatePath = _templateFilePrefix + extension;
        var fullFilePath;

        if(extension == '.definition.scss') sassImports.push(_filePrefix + '.' + _namePath + '.definition');
        if(extension == '.size.scss') {
          for (var a = 0; a < _sizes.length; a++) {
            data.sizeName = _sizeNames[a];
            data.sizeIncludeName = _sizeIncludeNames[a];
            data.sizeCssClassName = _sizeCssClassNames[a];
            var sizePath = _sizes[a].toLowerCase();
            fullFilePath = filePath + '.' + sizePath + '.scss';
            sassImports.push(_filePrefix + '.' + _namePath + '.' + sizePath);
            this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);
          }
        } else {
          fullFilePath = filePath + extension;
          this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);
        }
      }
    }

    // Add sass config
    var extension = '.scss';
    var templatePath = _templateFilePrefix + extension;
    var filePath = _pathSass + _categoryPath + '/' + _namePath + '/' + _filePrefix + '.' + _namePath;
    var fullFilePath = filePath + extension;
    data.sassImports = '';
    for (var x = 0; x < sassImports.length; x++) {
      data.sassImports += '@import \'' + sassImports[x] + '\';\n';
    }
    this.fs.copyTpl(this.templatePath(templatePath), this.destinationPath(fullFilePath), data);

    this.log('  Adding ' + _name + ' component into the ' + _category + ' category...');
    */

  },

  delete: function (categoryName, name) {

  }

};