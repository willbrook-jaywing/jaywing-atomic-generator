//-------------------------------------------------------
//  Library: Data Syncer
//-------------------------------------------------------

var _fs = require('fs');
var _ = require('lodash');

var _config = require('../../../components/config');
var _dataHelper = require('../../../components/lib/helpers/dataHelper');

//-------------------------
//  Private
//-------------------------

function _getNameFromSassFolderName(folderName) {
  var strs = folderName.toLowerCase().match(/[^\s-]+/g);
  var result = '';
  for(var i = 0; i < strs.length; i++) {
    result += _.upperFirst(strs[i]) + ' ';
  }
  result = result.trim();
  return result;
}

function _getSassCategoryFolderName(categoryName) {
  var result = categoryName.replace(/\s+/g, '-').toLowerCase();
  return result;
}

function _getSassCategoryPath(categoryName) {
  var folder = _getSassCategoryFolderName(categoryName);
  var result = _config.componentData.paths.sass + folder;
  return result;
}

//-------------------------
//  Public
//-------------------------

var self = module.exports = {

  getNamesFromSassFolders: function (categoryName, subCategoryName) {

    var names = [];

    var categoryFolder = _getSassCategoryFolderName(categoryName);
    var subCategoryFolder = _getSassCategoryFolderName(subCategoryName);
    var path = _config.componentData.paths.sass + categoryFolder + '/' + subCategoryFolder + '/';
    var exists = _fs.existsSync(path);
    if(exists) {
      var readList = _fs.readdirSync(path);
      for(var i = 0; i < readList.length; i++) {
        var folder = readList[i];
        var name = _getNameFromSassFolderName(folder);
        names.push(name);
      }
    }

    return names;

  },

  getSubCategoryNamesFromSassFolders: function (categoryName) {

    var names = [];

    var folder = _getSassCategoryFolderName(categoryName);
    var path = _config.componentData.paths.sass + folder + '/';

    var exists = _fs.existsSync(path);
    if(exists) {
      var readList = _fs.readdirSync(path);
      for (var i = 0; i < readList.length; i++) {
        var name = _getNameFromSassFolderName(readList[i]);
        names.push(name);
      }
    }

    return names;

  },

  getModuleClassNamesFromModulesFolder: function () {

    var names = [];

    var path = _config.componentData.paths.modules;
    var exists = _fs.existsSync(path);
    if(exists) {
      var readList = _fs.readdirSync(path);
      for(var i = 0; i < readList.length; i++) {
        var item = readList[i].split('.');
        var name = item[0];
        names.push(name);
      }
    }

    return names;

  },

  getDocsDataAsObj: function () {

    var path = _config.docsData.files.global;
    var json = _fs.readFileSync(path, 'utf8');
    var obj = JSON.parse(json);

    return obj;

  }

};